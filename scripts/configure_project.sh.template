#!/bin/bash

###ALL PATHS SHOULD BE RELATIVE TO marineplanner-core/scripts

### APP_NAME is the name on the application you are developing.
APP_NAME=$1
SCRIPTS_DIR=`pwd`
CORE=${SCRIPTS_DIR%/scripts*}

# If you know where you want your django app folder, uncomment and set the line below
#PROJ_FOLDER=Set_This_Yourself_To_Override

cd $CORE/apps &&
  ### Uncomment the modules you want included in this project:
  echo 'Cloning dependency repositories' &&
  if [ ! -d $APP_NAME ]; then git clone https://github.com/Ecotrust/$APP_NAME.git; fi &&
  # if [ ! -d madrona-analysistools ]; then git clone https://github.com/Ecotrust/madrona-analysistools.git; fi &&
  # if [ ! -d madrona-features ]; then git clone https://github.com/Ecotrust/madrona-features.git; fi &&
  # if [ ! -d madrona-forms ]; then git clone https://github.com/Ecotrust/madrona-forms.git; fi &&
  # if [ ! -d madrona-scenarios ]; then git clone https://github.com/Ecotrust/madrona-scenarios.git; fi &&
  # if [ ! -d madrona-manipulators ]; then git clone https://github.com/Ecotrust/madrona-manipulators.git; fi &&
  # if [ ! -d mp-clipping ]; then git clone https://github.com/Ecotrust/mp-clipping.git; fi &&
  # if [ ! -d mp-drawing ]; then git clone https://github.com/Ecotrust/mp-drawing.git; fi &&
  # if [ ! -d mp-explore ]; then git clone https://github.com/Ecotrust/mp-explore.git; fi &&
  # if [ ! -d mp-accounts ]; then git clone https://github.com/Ecotrust/mp-accounts.git; fi &&
  # if [ ! -d mp-visualize ]; then git clone https://github.com/Ecotrust/mp-visualize.git; fi &&
  # if [ ! -d mp-data-manager ]; then git clone https://github.com/Ecotrust/mp-data-manager.git; fi &&
  # if [ ! -d mp-proxy ]; then git clone https://github.com/Ecotrust/mp-proxy.git; fi &&
  # if [ ! -d marco-map_groups ]; then git clone https://github.com/Ecotrust/marco-map_groups.git; fi &&
  # if [ ! -d p97-nursery ]; then git clone https://github.com/Ecotrust/p97-nursery.git; fi &&
  # if [ ! -d p97settings ]; then git clone https://github.com/Ecotrust/p97settings.git; fi &&
  # if [ ! -d django-recaptcha-develop ]; then git clone https://github.com/Ecotrust/django-recaptcha-develop.git; fi &&
  echo 'Done cloning repositories.'
cd $CORE/scripts

#Identify best place for project settings file if not specified above
if [ -n $PROJ_FOLDER ]; then
  if [ -d $CORE/apps/$APP_NAME ]; then
    if [ -d $CORE/apps/$APP_NAME/$APP_NAME ]; then
      PROJ_FOLDER=$CORE/apps/$APP_NAME/$APP_NAME
    else
      PROJ_FOLDER=$CORE/apps/$APP_NAME
    fi
  fi
fi

### Copy and Link templates to full generated files
# Generate Vagrantfile
if [ ! -e $PROJ_FOLDER/Vagrantfile ]; then
  cp $CORE/Vagrantfile.template $PROJ_FOLDER/Vagrantfile
fi
if [ ! -e $CORE/Vagrantfile ]; then
  ln -s $PROJ_FOLDER/Vagrantfile $CORE/Vagrantfile
fi

#Generate basic provisoning script
if [ ! -e $PROJ_FOLDER/vagrant_provision.sh ]; then
  cp vagrant_provision.sh.template $PROJ_FOLDER/vagrant_provision.sh
fi
if [ ! -e $SCRIPTS_DIR/vagrant_provision.sh ]; then
  ln -s $PROJ_FOLDER/vagrant_provision.sh $SCRIPTS_DIR/vagrant_provision.sh
fi

#Generate project urls file
if [ ! -e $PROJ_FOLDER/proj_urls.py ]; then
  cp $CORE/marineplanner/marineplanner/urls.py $PROJ_FOLDER/proj_urls.py
fi
if [ ! -e $CORE/marineplanner/marineplanner/urls.py ]; then
  ln -s $PROJ_FOLDER/proj_urls.py $CORE/marineplanner/marineplanner/urls.py
fi

# $PROJ_SETTINGS=$PROJ_FOLDER/project_settings.py
#Copy project settings to the project folder to be preserved in its project repository
if [ ! -e $PROJ_FOLDER/project_settings.py ]; then
  cp $CORE/marineplanner/marineplanner/project_settings.py.template $PROJ_FOLDER/project_settings.py
fi
#Symlink the project settings to be used by MarinePlanner
if [ ! -e $CORE/marineplanner/marineplanner/project_settings.py ]; then
  ln -s $PROJ_FOLDER/project_settings.py $CORE/marineplanner/marineplanner/project_settings.py
fi

### Find hooks in generated files to insert content into
# VAGRANTFILE_INSERT_LINE=`grep -n '### END MODULE PROVISION FILES ###' $CORE/Vagrantfile | cut -f1 -d:`
# VAGRANTFILE_COLON_INDEX=`expr index $VAGRANTFILE_INSERT_LINE_CONTENT :`
# VAGRANTFILE_INSERT_LINE=${VAGRANTFILE_INSERT_LINE_CONTENT:0:$VAGRANTFILE_COLON_INDEX-1}

# PROVISION_INSERT_LINE=`grep -n '### END PROJECT PROVISION FILES ###' $SCRIPTS_DIR/vagrant_provision.sh | cut -f1 -d:`
# PROVISION_COLON_INDEX=`expr index $PROVISION_INSERT_LINE_CONTENT :`
# PROVISION_INSERT_LINE=${PROVISION_INSERT_LINE_CONTENT:0:$PROVISION_COLON_INDEX-1}

# URLS_INSERT_LINE=`grep -n '### END PROJECT URL INCLUDES ###' $CORE/marineplanner/marineplanner/urls.py | cut -f1 -d:`
# URLS_COLON_INDEX=`expr index $URLS_INSERT_LINE_CONTENT :`
# URLS_INSERT_LINE=${URLS_INSERT_LINE_CONTENT:0:$URLS_COLON_INDEX-1}

# APPS_INSERT_LINE=`grep -n '### END INSERTED INSTALLED APPS ###' $CORE/marineplanner/marineplanner/project_settings.py | cut -f1 -d:`
# APPS_COLON_INDEX=`expr index $APPS_INSERT_LINE_CONTENT :`
# APPS_INSERT_LINE=${APPS_INSERT_LINE_CONTENT:0:$APPS_COLON_INDEX-1}

cd $CORE/apps/ &&
  for i in `ls -d */ | cut -f1 -d/`; do
    echo '####'
    echo $i
    # slash_index=`expr index $i /`
    # module_file_name=${i:0:$slash_index-1}
    # INSERT PROVISIONING FILES INTO VAGRANTFILE IF THEY EXIST

    # INSERT COMMAND TO INSTALL APP MODULE INTO PROVISIONING
    PROVISION_END_LINE="\#\#\# END PROJECT PROVISION FILES \#\#\#"
    # sed -i 's/$PROVISION_END_LINE/\$PIP install -e \$PROJECT_DIR\/apps\/$i \&\& \n    $PROVISION_END_LINE/' $PROJ_FOLDER/vagrant_provision.sh
    sed -i 's/$PROVISION_END_LINE/$i\n    $PROVISION_END_LINE/' $PROJ_FOLDER/vagrant_provision.sh
    echo $?

    setup_file=$CORE/apps/$module_file_name/setup.py
    if [ -e $setup_file ]; then
      app_name_line=`grep "packages=['" $setup_file`
      re="[[:space:]]*packages=\['[^/' ]'\]+'\][[:space:]]*"
      if [[ $app_name_line =~ $re ]]; then
        module_name=${BASH_REMATCH[1]}
        echo MODULE NAME FOUND: $module_name
        # ADD APP TO URLS

        # ADD APP TO INSTALLED_APPS
      fi
    fi


    # TODO: handle module setup steps here...
    #   - insert module-specific provision scripts into vagrantfile
    #   - insert module url file imports into urls.py
    #   - import module setting into top of project_settings.py
    #   - insert module into INSTALLED_APPS -- maybe in its own settings file
    #   - etc...
    echo $module_file_name
  done

# shopt -s nullglob #this is important for reasons beyond my comprehension
# cd ../apps/ &&
# modules=(*/) #get list of directories, ignoring __init__.py
# shopt -u nullglob #this undoes the important thing done earlier, and is also important
